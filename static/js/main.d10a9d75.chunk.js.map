{"version":3,"sources":["components/Menu.js","types/usuariosTypes.js","actions/usuariosActions.js","components/General/Spinner.js","components/General/Fatal.js","components/Usuarios/Tabla.js","components/Usuarios/index.js","types/publicacionesTypes.js","components/Publicaciones/Comentarios.js","components/Publicaciones/index.js","actions/publicacionesActions.js","types/tareasTypes.js","actions/tareasActions.js","components/Tareas/index.js","components/Tareas/Guardar.js","components/App.js","reducers/usuariosReducers.js","reducers/publicacionesReducer.js","reducers/tareasReducer.js","reducers/index.js","index.js"],"names":["Menu","props","id","to","TRAER_TODOS","CARGANDO","ERROR","traerTodos","dispatch","a","async","type","axios","get","respuesta","payload","data","console","log","message","Spinner","className","Fatal","mensaje","connect","reducers","usuariosReducer","usuarios","map","usuario","key","name","email","website","Usuarios","ponerContenido","cargando","error","length","this","Component","usuariosActions","ACTUALIZAR","publicacionesReducer","com_error","com_cargando","comentarios","comentario","body","usuariosTraerTodos","publicacionesTraerPorUsuario","getState","publicaciones","usuario_id","nuevas","publicacion","abierto","publicaciones_actualizadas","publicaciones_key","usuarios_actualizados","usuariosTypes","abrirCerrar","pub_key","com_key","seleccionada","actualizada","traerComentarios","Publicaciones","ponerUsuario","match","params","nombre","ponerPublicaciones","mostrarInfo","onClick","mostrarComentarios","title","mapDispatchToProps","TRAER_TODAS","GUARDAR","LIMPIAR","traerTodas","tareas","tar","userId","cambioUsuarioId","cambioTitulo","titulo","agregar","nueva_tarea","post","editar","tarea_editada","put","cambioCheck","usu_id","tar_id","tareasReducer","actualizadas","completed","eliminar","delete","limpiarForma","Tareas","mostrarContenido","Object","keys","ponerTareas","por_usuario","defaultChecked","onChange","tareasActions","Guardar","event","target","value","guardar","tarea","deshabilitar","mostrarAccion","regresar","disabled","App","exact","path","component","TareasGuardar","INITIAL_STATE","combineReducers","state","action","store","createStore","applyMiddleware","reduxThunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d10a9d75.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nconst Menu = (props) => (\r\n\t<nav id=\"menu\">\r\n\t\t<Link to=\"/\">Usuarios</Link>\r\n\t\t<Link to=\"/tareas\">Tareas</Link>\r\n\t</nav>\r\n);\r\n\r\nexport default Menu;\r\n","export const TRAER_TODOS = 'usuarios_traer_todos';\r\nexport const CARGANDO = 'usuarios_cargando';\r\nexport const ERROR = 'usuarios_error';","import axios from \"axios\"; //importamos axios para hacer peticiones http\r\nimport { TRAER_TODOS, CARGANDO, ERROR } from \"../types/usuariosTypes\" // IMPORTAMOS SOLAMENTE la constante TRAER_TODOS de esta ruta ../types/usuariosTypes\r\n\r\n//esta funcion traerTodos retorna otra función, dispatch (envio) es el que va a disparar esa llamada y va a contactar al reducer para que haga el cambio de estado\r\nexport const traerTodos = () => async (dispatch) => {\r\n\tdispatch({\r\n\t\ttype: CARGANDO,\r\n\t})\r\n\ttry {\r\n\t\t//hacemos una peticion de tipo get a la API y la respuesta es una promesa y para leerla usaremos async/await\r\n\t\tconst respuesta = await axios.get('https://jsonplaceholder.typicode.com/users'); //retorna un promesa y cuando se resuelva esa promesa asignala a la variable\r\n\t\t\r\n\t\tdispatch({\r\n\t\t\ttype: TRAER_TODOS,\r\n\t\t\tpayload: respuesta.data\r\n\t\t});\r\n\t} catch (error) {\r\n\t\tconsole.log(\"error:\" + error.message)\r\n\t\tdispatch({\r\n\t\t\ttype: ERROR,\r\n\t\t\tpayload: \"Información de usuario no disponible.\"\r\n\t\t});\r\n\t}\r\n};\r\n","import React from 'react';\r\nimport '../../css/spinner.css'; //importamos los estilos de la animacion del loader\r\n\r\n//este componente solo muestra la animacion\r\nconst Spinner = (props) => (\r\n\t<div className=\"center\">\r\n\t\t<div className=\"lds-spinner\">\r\n\t\t\t<div></div>\r\n\t\t\t<div></div>\r\n\t\t\t<div></div>\r\n\t\t\t<div></div>\r\n\t\t\t<div></div>\r\n\t\t\t<div></div>\r\n\t\t\t<div></div>\r\n\t\t\t<div></div>\r\n\t\t\t<div></div>\r\n\t\t\t<div></div>\r\n\t\t\t<div></div>\r\n\t\t\t<div></div>\r\n\t\t</div>\r\n\t</div>\r\n);\r\n\r\nexport default Spinner;\r\n","import React from 'react';\r\n\r\n// este componente solo muestra el error que lo recibe por props\r\nconst Fatal = (props) => (\r\n    <h2 className=\"center rojo\">\r\n        { props.mensaje }\r\n    </h2>\r\n);\r\n\r\nexport default Fatal;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\n// IMPORTAMOS EL CONECTOR DE REDUX PARA CONECTAR ESTE COMPONENTE AL STORE GLOBAL\r\nimport { connect } from 'react-redux';\r\n\r\n// este componente solo muestra el error que lo recibe por props\r\nconst Tabla = (props) => {\r\n\t//un metodo que retorna una fila por cada usuario que hay en el estado\r\n\tconst ponerFilas = () =>\r\n\t\t// el parametro key que recibe el map es el índice del ítem del arreglo\r\n\t\tprops.usuarios.map((usuario, key) => (\r\n\t\t\t<tr key={usuario.id}>\r\n\t\t\t\t<td>{usuario.name}</td>\r\n\t\t\t\t<td>{usuario.email}</td>\r\n\t\t\t\t<td>{usuario.website}</td>\r\n\t\t\t\t<td>\r\n\t\t\t\t\t<Link to={`/publicaciones/${key}`}>\r\n\t\t\t\t\t\t<div className=\"eye-solid icon\"></div>\r\n\t\t\t\t\t</Link>\r\n\t\t\t\t</td>\r\n\t\t\t</tr>\r\n\t\t));\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<table className=\"tabla\">\r\n\t\t\t\t<thead>\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<th>Nombre</th>\r\n\t\t\t\t\t\t<th>Correo</th>\r\n\t\t\t\t\t\t<th>Enlace</th>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t</thead>\r\n\r\n\t\t\t\t<tbody>{ponerFilas()}</tbody>\r\n\t\t\t</table>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\n// Recibe todos los reducers y le decimos que reducer queremos usar en este componente.\r\nconst mapStateToProps = (reducers) => {\r\n\treturn reducers.usuariosReducer;\r\n};\r\n\r\n// Ya en el connect recibe la función mapStateToProps, las acciones y por ultimo nos llega por props ese reducer es decir el estado y los action creators no porque el componente usuarios ya las trae.\r\nexport default connect(mapStateToProps)(Tabla);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux'; //importamos el conector para poder conectar el componente con el reducer o almacenamiento global\r\n\r\nimport * as usuariosActions from '../../actions/usuariosActions';\r\nimport Spinner from '../General/Spinner'; //importamos el componente que muestra la animacion\r\nimport Fatal from '../General/Fatal'; //importamos el componente que muestra el error\r\nimport Tabla from './Tabla'; //importamos el componente tabla\r\n\r\nclass Usuarios extends Component {\r\n\t// cuando se monte el componente vamos a modificar el estado, por lo que hace un re render (vuelve a renderizar)\r\n\tcomponentDidMount() {\r\n\t\t// si no hay ningun usuarios traelos y si existen no hagas nada\r\n\t\tif (!this.props.usuarios.length) {\r\n\t\t\tthis.props.traerTodos();\r\n\t\t}\r\n\t}\r\n\r\n\tponerContenido = () => {\r\n\t\t// si esta cargando la peticion HTTP muestra un loader mientras\r\n\t\tif (this.props.cargando) {\r\n\t\t\treturn <Spinner />;\r\n\t\t}\r\n\r\n\t\t// si hay algun error en el estado del reducer retorna el componente fatal\r\n\t\tif (this.props.error) {\r\n\t\t\treturn <Fatal mensaje={this.props.error} />;\r\n\t\t}\r\n\r\n\t\t// si los datos estan vacios\r\n\t\tif (this.props.usuarios.length === 0) {\r\n\t\t\treturn (\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<h3>No encontramos ningún Usuario</h3>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\treturn <Tabla />;\r\n\t};\r\n\r\n\trender() {\r\n\t\tconsole.log(this.props)\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<h1>Usuarios</h1>\r\n\t\t\t\t{this.ponerContenido()}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\n// Recibe todos los reducers y le decimos que reducer queremos usar en este componente.\r\nconst mapStateToProps = (reducers) => {\r\n\treturn reducers.usuariosReducer;\r\n};\r\n\r\n// Ya en el connect recibe la función mapStateToProps, las acciones y por ultimo nos llega por props ese reducer es decir el estado y los action creators.\r\nexport default connect(mapStateToProps, usuariosActions)(Usuarios);\r\n","export const ACTUALIZAR = 'publicaciones_actualizar';\r\nexport const CARGANDO = 'publicaciones_cargando';\r\nexport const ERROR = 'publicaciones_error';\r\nexport const COM_CARGANDO = 'comentarios_cargando';\r\nexport const COM_ERROR = 'comentarios_error';\r\nexport const COM_ACTUALIZAR = 'comentarios_actualizar';","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Spinner from '../General/Spinner';\r\nimport Fatal from '../General/Fatal';\r\n\r\n// recibe por props los comentarios de la publicacion que se le dio click\r\nconst Comentarios = (props) => {\r\n\r\n\t\r\n\tif (props.com_error) {\r\n\t\treturn <Fatal mensaje={ props.com_error } />\r\n\t}\r\n\r\n\t// si esta cargando y que no exista ningun comentario retorna el spinner\r\n\tif (props.com_cargando && props.comentarios.length === 0) {\r\n\t\treturn <Spinner />\r\n\t}\r\n\r\n\t// si los comentarios vienen vacios, entonces no tiene comentarios esta publicacion\r\n\tif (props.comentarios.length === 0) {\r\n\t\treturn <Fatal mensaje={\" Este publicacion no tiene comentarios \"} />\r\n\t}\r\n\r\n\r\n\t// retona un arreglo, itero los comentarios de la publicacion y por cada comentario retorna un li\r\n\tconst ponerComentarios = () =>\r\n\t\tprops.comentarios.map((comentario) => (\r\n\t\t\t<li key={comentario.id}>\r\n\t\t\t\t<b>\r\n\t\t\t\t\t<u> {comentario.email} </u>\r\n\t\t\t\t</b>\r\n\t\t\t\t<br />\r\n\t\t\t\t{comentario.body}\r\n\t\t\t</li>\r\n\t\t));\r\n\r\n\treturn <ul>{ponerComentarios()}</ul>;\r\n};\r\n\r\n// Recibe todos los reducers y destructuramos todos los reducers por los que necesitamos\r\nconst mapStateToProps = ({ publicacionesReducer }) => publicacionesReducer;\r\n\r\n// Ya en el connect recibe la función mapStateToProps, las acciones y por ultimo nos llega por props ese reducer es decir el estado y los action creators por props\r\nexport default connect(mapStateToProps)(Comentarios);\r\n","import React, { Component } from 'react';\r\n\r\n// conectamos este componente a redux para acceder al reducer\r\nimport { connect } from 'react-redux';\r\nimport * as usuariosActions from '../../actions/usuariosActions';\r\nimport * as publicacionesActions from '../../actions/publicacionesActions';\r\n\r\nimport Spinner from '../General/Spinner';\r\nimport Fatal from '../General/Fatal';\r\n\r\nimport Comentarios from \"./Comentarios\" // importamos el componente\r\n\r\n// destructuramos y renombramos el nombre del action creator\r\nconst { traerTodos: usuariosTraerTodos } = usuariosActions;\r\nconst { \r\n\ttraerPorUsuario: publicacionesTraerPorUsuario, \r\n\tabrirCerrar,\r\n\ttraerComentarios\r\n\t} = publicacionesActions;\r\n\r\nclass Publicaciones extends Component {\r\n\tasync componentDidMount() {\r\n\t\t// Destructuramos cosas del this.props y el key por cada punto hay que destructurar mas adentro\r\n\t\tconst {\r\n\t\t\tusuariosTraerTodos,\r\n\t\t\tpublicacionesTraerPorUsuario,\r\n\t\t\tmatch: {\r\n\t\t\t\tparams: { key }\r\n\t\t\t}\r\n\t\t} = this.props;\r\n\r\n\t\t// si no existen los usuarios (si no tiene mas de cero el arreglo) haz algo\r\n\t\tif (!this.props.usuariosReducer.usuarios.length) {\r\n\t\t\tawait usuariosTraerTodos();\r\n\t\t}\r\n\r\n\t\t// si hay un error retorna nada \r\n\t\tif (this.props.usuariosReducer.error) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// si este atributo publicaciones_key esta en el usuariosReducer.usuarios que me esta llegando (no ejecutes esto), Si no esta ese atributo en este usuario hay que ir a ponerla\r\n\t\tif (!('publicaciones_key' in this.props.usuariosReducer.usuarios[key])) {\r\n\t\t\tpublicacionesTraerPorUsuario(key);\r\n\t\t}\r\n\t}\r\n\r\n\t// se va a poner en el render\r\n\tponerUsuario = () => {\r\n\t\t// destructuro el usuarios reducers\r\n\t\tconst { \r\n\t\t\tusuariosReducer, \r\n\t\t\tmatch: { params: { key } } \r\n\t\t} = this.props\r\n\r\n\t\t// si en el reducer de usuarios hay un error ejecuta el componente fatal\r\n\t\tif (usuariosReducer.error) {\r\n\t\t\treturn <Fatal mensaje={ usuariosReducer.error } />\r\n\t\t}\r\n\r\n\t\t// si el usuarios reducer esta cargando o que usuariosReducer.usuarios.lenght no exista \r\n\t\tif ( usuariosReducer.usuarios.length === 0 || usuariosReducer.cargando) {\r\n\t\t\treturn <Spinner />\r\n\t\t}\r\n\r\n\t\t// del reducer de usuarios del usuario que estoy actualmente quiero el nombre\r\n\t\tconst nombre = usuariosReducer.usuarios[key].name\r\n\r\n\t\treturn (\r\n\t\t<h1> Publicaciones de {nombre} </h1>\r\n\t\t)\r\n\t};\r\n\r\n\t// se va a poner en el render\r\n\tponerPublicaciones = () => {\r\n\t\t// destructuramos\r\n\t\tconst {\r\n\t\t\tusuariosReducer,\r\n\t\t\tusuariosReducer: { usuarios },\r\n\t\t\tpublicacionesReducer,\r\n\t\t\tpublicacionesReducer: { publicaciones },\r\n\t\t\tmatch: { params: { key } } \r\n\t\t} = this.props;\r\n\r\n\t\t// si no hay usuarios, retorna nada, si hay un error retorna nada porque en ponerUsuario() ya lo estamos validando\r\n\t\tif (!usuarios.length) return;\r\n\t\tif (usuariosReducer.error) return;\r\n\r\n\t\t// si publicaciones esta cargando, retorno el spinner y si hay un error retorno el fatal mandandole el error y si las publicaciones aun no estan retorna nada y si el atributo publicaciones_key no esta en el reducer retorna nada.\r\n\t\tif (publicacionesReducer.cargando) {\r\n\t\t\treturn <Spinner />;\r\n\t\t}\r\n\t\tif (publicacionesReducer.error) {\r\n\t\t\treturn <Fatal mensaje={publicacionesReducer.error} />\r\n\t\t}\r\n\t\tif (publicaciones.length === 0) return;\r\n\t\tif (!(\"publicaciones_key\" in usuarios[key])) return;\r\n\t\r\n\t\t// y si todo esta bien ya tengo las publicaciones y de ese usuario destructuro publicaciones key (donde estan las publicaciones de este usuario) y retorno todas las publicaciones que estan en esa casilla del arreglo\r\n\t\t// mando por parametro de todas las publicaciones selecciono las publicaciones que le corresponden a este usuario\r\n\t\tconst { publicaciones_key } = usuarios[key]\r\n\t\treturn this.mostrarInfo( \r\n\t\t\tpublicaciones[publicaciones_key],\r\n\t\t\tpublicaciones_key \r\n\t\t);\r\n\t};\r\n\r\n\t// funcion que retorna todas las publicaciones del usuario en especifico (recibimos por parametro todas las publicaciones que le corresponden a este usuario y la casilla de donde estan las publicaciones de este usuario)\r\n\tmostrarInfo = ( publicaciones, pub_key ) => (\r\n\t\tpublicaciones.map( (publicacion, com_key) => ( \r\n\t\t\t<div \r\n\t\t\t\tkey={ publicacion.id }\r\n\t\t\t\tclassName=\"publicaciones-titulo\"\r\n\t\t\t\tonClick={ \r\n\t\t\t\t\t() => this.mostrarComentarios(pub_key, com_key, publicacion.comentarios)\r\n\t\t\t\t}\r\n\t\t\t>\r\n\t\t\t\t<h2>{ publicacion.title }</h2>\r\n\t\t\t\t<h3>{publicacion.body}</h3>\r\n\t\t\t\t{\r\n\t\t\t\t\t// si el atributo abierto de la publicacion es true retorna el componente caso contrario es cerrado, le mandamos por props los comentarios\r\n\t\t\t\t\t(publicacion.abierto) ? <Comentarios comentarios={publicacion.comentarios} /> : \"\"\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t))\r\n\t);\r\n\r\n\t// Cada vez que hagan click llama a esta function y recibe por parametro la casilla de donde están las publicaciones de este usuario y a cual publicación en especifico fue a la que le di click (sacamos el índice de la publicación del map) y nos llegan los comentarios\r\n\tmostrarComentarios = (pub_key, com_key, comentarios) => {\r\n\t\t// llamamos al actions Creator que modifica el atributo abierto de la publicacion\r\n\t\tthis.props.abrirCerrar(pub_key, com_key);\r\n\r\n\t\t//si comentarios esta vacio, llamamos a este actionsCreator Y este retona todas las publicaciones pero modifica el atributo comentarios de la publicación que se le dio CLICK\r\n\t\tif (comentarios.length === 0) {\r\n\t\t\tthis.props.traerComentarios(pub_key, com_key);\r\n\t\t}\r\n\t\t\r\n\r\n\t}\r\n\r\n\r\n\trender() {\r\n\t\tconsole.log(this.props);\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t{ this.ponerUsuario() }\r\n\t\t\t\t{ this.ponerPublicaciones() }\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\n// Recibe todos los reducers y destructuramos todos los reducers por los que necesitamos\r\nconst mapStateToProps = ({ usuariosReducer, publicacionesReducer }) => {\r\n\treturn {\r\n\t\tusuariosReducer,\r\n\t\tpublicacionesReducer\r\n\t};\r\n};\r\n\r\n// como estamos usando varias acciones le especificamos las acciones que usaremos en este componente\r\nconst mapDispatchToProps = {\r\n\tusuariosTraerTodos,\r\n\tpublicacionesTraerPorUsuario,\r\n\tabrirCerrar,\r\n\ttraerComentarios\r\n};\r\n\r\n// Ya en el connect recibe la función mapStateToProps, las acciones y por ultimo nos llega por props ese reducer es decir el estado y los action creators por props\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Publicaciones);\r\n","import axios from 'axios';\r\nimport {\r\n\tACTUALIZAR,\r\n\tCARGANDO,\r\n\tERROR,\t\r\n\tCOM_ACTUALIZAR,\r\n\tCOM_ERROR,\r\n\tCOM_CARGANDO\r\n} from '../types/publicacionesTypes'; // IMPORTAMOS SOLAMENTE las constante TRAER_TODOS de esta ruta ../types/publicacionesTypes\r\n\r\nimport * as usuariosTypes from '../types/usuariosTypes' //importamos los types de usuarios\r\n\r\n// destructuramos y renombramos el tipo de traer todos\r\nconst { TRAER_TODOS: USUARIOS_TRAER_TODOS } = usuariosTypes\r\n\r\n// creamos un action creator que va hacer la llamada a un único usuario, recibe por parametro key que es el índice del ítem del arreglo que se esta enviando\r\nexport const traerPorUsuario = (key) => async (dispatch, getState) => {\r\n\r\n\tdispatch({\r\n\t\ttype: CARGANDO\r\n\t});\r\n\r\n\tconst { usuarios } = getState().usuariosReducer; //getState puedo tener acceso al estado actual, voy a traer los usuarios que hay en ese reducer\r\n\tconst { publicaciones } = getState().publicacionesReducer; //getState puedo tener acceso al estado actual, voy a traer las publicaciones de publicacionesReducer\r\n\tconst usuario_id = usuarios[key].id //saco el id del usuario | el parametro key que recibe es el índice del ítem del arreglo\r\n\t\r\n\ttry {\r\n\t\tconst respuesta = await axios.get(`https://jsonplaceholder.typicode.com/posts?userId=${usuario_id}`)\r\n\r\n\t\t// variable sera un arreglo de objetos con todo lo que me trae respuesta.data y le agrego a cada publicacion dos atributos mas\r\n\t\tconst nuevas = respuesta.data.map( (publicacion) => ({\r\n\t\t\t...publicacion,\r\n\t\t\tcomentarios: [],\r\n\t\t\tabierto: false\r\n\t\t}));\r\n\r\n\t\t// de las publicaciones del reducer lo despliego aqui y le agrego las publicaciones nuevas que recibimos de este usuario\r\n\t\tconst publicaciones_actualizadas = [\r\n\t\t\t...publicaciones,\r\n\t\t\tnuevas\r\n\t\t]\r\n\r\n\t\t// envia al publicaciones_reducers el arreglo con las publicaciones del usuario que se estan viendo y despues hacemos el proximo dispatch al usuario en esta casilla están tus publicaciones \r\n\t\tdispatch({\r\n\t\t\ttype: ACTUALIZAR,\r\n\t\t\tpayload: publicaciones_actualizadas\r\n\t\t});\r\n\r\n\t\t// Falta decirle al usuariosReducer tus publicaciones están en esta casilla del arreglo.\r\n\t\t// NECESITO SACAR LA ULTIMA CASILLA DE ESTAS PUBLICACIONES actualizadas | me da el numero de casillas que hay (1er render da cero y en el re-render hay uno) y le restp 1 para sacar la casilla\r\n\t\t// Ahora tengo que actualizar los usuarios, creo un nuevo arreglo con todos estos usuarios que hay en el estado actual\r\n\t\t// al usuario en especifico de ese arreglo le creare un atributo, con la posicion de su key o index.\r\n\t\tconst publicaciones_key = publicaciones_actualizadas.length - 1;\r\n\t\tconst usuarios_actualizados = [...usuarios];\r\n\t\tusuarios_actualizados[key] = {\r\n\t\t\t...usuarios[key],\r\n\t\t\tpublicaciones_key\r\n\t\t}\r\n\t\t\r\n\t\t// dispatch para mandar los usuarios actualizados a usuariosReducer que es un arreglo con todos los usuarios solo que con un atributo llamado publicaciones_key que nos dice en que casilla del arreglo están las publicaciones del usuario\r\n\t\tdispatch({\r\n\t\t\ttype: USUARIOS_TRAER_TODOS,\r\n\t\t\tpayload: usuarios_actualizados\r\n\t\t});\r\n\t} catch (error) {\r\n\t\tconsole.log(error.message);\r\n\t\tdispatch({\r\n\t\t\ttype: ERROR,\r\n\t\t\tpayload: 'Publicaciones no disponibles' \r\n\t\t})\r\n\t}\r\n}\r\n\r\n// actions que recibe por parametro la casilla de donde están las publicaciones de este usuario y a cual publicación en especifico fue a la que le di click (sacamos el índice de la publicación del map)\r\nexport const abrirCerrar = (pub_key, com_key) => (dispatch, getState) => {\r\n\r\n\tconst { publicaciones } = getState().publicacionesReducer; //getState puedo tener acceso al estado actual, voy a traer las publicaciones de publicacionesReducer (las publicaciones es un arreglo que tiene dentro las publicaciones)\r\n\tconst seleccionada = publicaciones[pub_key][com_key] //de todas las publicaciones de este usuario vas a seleccionar la publicacion que le di click\r\n\r\n\t// despliega especificamente la publicacion a la que le dio click y modificamos la propiedad de abierto por el contrario que seleccionada tiene abierto: !seleccionada.abierto\r\n\tconst actualizada = {\r\n\t\t...seleccionada,\r\n\t\tabierto: !seleccionada.abierto\r\n\t}\r\n\r\n\tconst publicaciones_actualizadas = [...publicaciones]; // esta constante sera el arreglo con todas las publicaciones\r\n\t// seleccionamos las publicaciones del usuario y desplegamos todas las publicaciones de este usuario\r\n\tpublicaciones_actualizadas[pub_key] = [\r\n\t\t...publicaciones[pub_key]\r\n\t];\r\n\t// de todas las publicaciones del usuario, selecciono a la que se le dio click y sera igual a la publicacion pero con el abierto cambiado \r\n\tpublicaciones_actualizadas[pub_key][com_key] = actualizada;\r\n\r\n\t// Hago un dispatch mandando el arreglo con todas las publicaciones de los usuarios al PublicacionesReducer, pero a la publicación que se le dio click será igual a la publicación pero con el atributo abierto cambiado.\r\n\tdispatch({\r\n\t\ttype: ACTUALIZAR,\r\n\t\tpayload: publicaciones_actualizadas\r\n\t});\r\n\r\n}\r\n\r\n// va a buscar los comentarios de la publicacion que se le dio click, actions que recibe por parametro la casilla de donde están las publicaciones de este usuario y a cual publicación en especifico fue a la que le di click (sacamos el índice de la publicación del map)\r\nexport const traerComentarios = (pub_key, com_key) => async (dispatch, getState) => {\r\n\r\n\tdispatch({\r\n\t\ttype: COM_CARGANDO\r\n\t})\r\n\r\n\tconst { publicaciones } = getState().publicacionesReducer; //getState puedo tener acceso al estado actual, voy a traer las publicaciones de publicacionesReducer (las publicaciones es un arreglo que tiene dentro las publicaciones)\r\n\tconst seleccionada = publicaciones[pub_key][com_key] //de todas las publicaciones de este usuario vas a seleccionar la publicacion que le di click\r\n\r\n\ttry {\r\n\t\t// buscamos los comentarios de la publicacion a la que se le dio click.\r\n\t\tconst respuesta = await axios.get(`https://jsonplaceholder.typicode.com/comments?postId=${seleccionada.id}`)\r\n\r\n\t\t// objeto que depliega todo lo que tiene la publicacion que le di click, y el atributo comentarios por los comentarios de la publicacion a la que se le dio click, lo cambio por el respuesta.data\r\n\t\tconst actualizada = {\r\n\t\t\t...seleccionada,\r\n\t\t\tcomentarios: respuesta.data\r\n\t\t}\r\n\r\n\t\t// hacemos inmutabilidad\r\n\t\tconst publicaciones_actualizadas = [...publicaciones]; // esta constante sera el arreglo con todas las publicaciones\r\n\t\t// seleccionamos las publicaciones del usuario y desplegamos todas las publicaciones de este usuario\r\n\t\tpublicaciones_actualizadas[pub_key] = [\r\n\t\t\t...publicaciones[pub_key]\r\n\t\t];\r\n\t\t// de todas las publicaciones del usuario, selecciono a la que se le dio click y sera igual a la publicacion pero con los comentarios de la publicacion actualizados\r\n\t\tpublicaciones_actualizadas[pub_key][com_key] = actualizada;\r\n\r\n\t\t// Hago un dispatch mandando el arreglo con todas las publicaciones de los usuarios al PublicacionesReducer, pero a la publicación que se le dio click será igual a la publicación pero con el atributo comentarios actualizados.\r\n\t\tdispatch({\r\n\t\t\ttype: COM_ACTUALIZAR,\r\n\t\t\tpayload: publicaciones_actualizadas\r\n\t\t});\r\n\t} catch (error) {\r\n\t\tconsole.log(error.message);\r\n\t\tdispatch({\r\n\t\t\ttype: COM_ERROR,\r\n\t\t\tpayload: 'Comentarios no disponibles' \r\n\t\t})\r\n\t}\r\n\r\n}\r\n","export const TRAER_TODAS = 'tareas_traer_todas';\r\nexport const CARGANDO = 'tareas_cargando';\r\nexport const ERROR = 'tareas_error';\r\nexport const CAMBIO_USUARIO_ID = 'tareas_cambio_usuario_id';\r\nexport const CAMBIO_TITULO = 'tareas_cambio_titulo';\r\nexport const GUARDAR = 'tareas_guardar';\r\nexport const ACTUALIZAR = 'tareas_actualizar';\r\nexport const LIMPIAR = 'tareas_limpiars';","import axios from 'axios'; //importamos axios para hacer peticiones http\r\nimport { \r\n\tTRAER_TODAS, \r\n\tCARGANDO, \r\n\tERROR,\r\n\tCAMBIO_USUARIO_ID,\r\n\tCAMBIO_TITULO,\r\n\tGUARDAR,\r\n\tACTUALIZAR,\r\n\tLIMPIAR\r\n} from '../types/tareasTypes'; // IMPORTAMOS SOLAMENTE la constante TRAER_TODOS de esta ruta ../types/usuariosTypes\r\n\r\n//esta funcion traerTodos retorna otra función, dispatch (envio) es el que va a disparar esa llamada y va a contactar al reducer para que haga el cambio de estado\r\nexport const traerTodas = () => async (dispatch) => {\r\n\tdispatch({\r\n\t\ttype: CARGANDO\r\n\t});\r\n\ttry {\r\n\t\t//hacemos una peticion de tipo get a la API y la respuesta es una promesa y para leerla usaremos async/await\r\n\t\tconst respuesta = await axios.get(\r\n\t\t\t'https://jsonplaceholder.typicode.com/todos'\r\n\t\t); //retorna un promesa y cuando se resuelva esa promesa asignala a la variable\r\n\r\n\t\t// Creo mi objeto vacio de tareas, por todo lo que me esta repondiendo la api que es un arreglo, por cada tarea voy a iterar, El objeto vacio de tareas le voy a agregar un atributo-objeto que es el tar.userId el id de cada usuario(tar vale a cada tarea) y a ese objeto despliega todo lo que tenga las tareas en ese id y le pasamos un nuevo atributo a ese objeto que es el id de la tarea y le pasamos todo el objeto.\r\n\t\t// el segundo objeto a iterar de la api, a tareas al objeto con el id del usuario 1: a ese objeto le despligo todo lo que ya tenia, tenia el objeto 1 que era la tarea anterior con id 1 y aparte a ese objeto le voy agregar la propiedad 2, va a tener la propiedad 1 y le añado la propiedad dos\r\n\t\t// acomoda en un objeto con id del usuario, las tareas que le corresponden a este usuario\r\n\t\tconst tareas = {}\r\n\t\trespuesta.data.map( (tar) => (\r\n\t\t\ttareas[tar.userId] = {\r\n\t\t\t\t...tareas[tar.userId],\r\n\t\t\t\t[tar.id]: {\r\n\t\t\t\t\t...tar\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t));\r\n\r\n\t\tdispatch({\r\n\t\t\ttype: TRAER_TODAS,\r\n\t\t\tpayload: tareas\r\n\t\t});\r\n\t} catch (error) {\r\n\t\tconsole.log('error:' + error.message);\r\n\t\tdispatch({\r\n\t\t\ttype: ERROR,\r\n\t\t\tpayload: 'Información de tareas no disponible.'\r\n\t\t});\r\n\t}\r\n};\r\n\r\n// esta accion va a cambiar usuarioId mandando un dispatch que modifica ese atributo del reducer, recibe por parametro lo que se escribio en el input\r\nexport const cambioUsuarioId = (usuario_id) => (dispatch) => {\r\n\tdispatch({\r\n\t\ttype: CAMBIO_USUARIO_ID,\r\n\t\tpayload: usuario_id\r\n\t})\r\n}\r\n\r\n// esta accion va a cambiar titulo mandando un dispatch que modifica ese atributo del reducer, recibe por parametro lo que se escribio en el input\r\nexport const cambioTitulo = (titulo) => (dispatch) => {\r\n\tdispatch({\r\n\t\ttype: CAMBIO_TITULO,\r\n\t\tpayload: titulo\r\n\t})\r\n}\r\n\r\n// actions que recibe por parametro un objeto con la info de la nueva tarea, que se mandara a la API para que la API lo maneje\r\nexport const agregar = (nueva_tarea) => async (dispatch) => {\r\n\t// dispatch de cargando\r\n\tdispatch({\r\n\t\ttype: CARGANDO\r\n\t})\r\n\r\n\ttry {\r\n\t\t//peticion POST el segundo parametro es el objeto que le voy a agregar a la API, y me retorna la respuesta de la peticion en respuesta.data el nuevo campo que se agrego, porque la api es una api fake.\r\n\t\tconst respuesta = await axios.post(\"https://jsonplaceholder.typicode.com/todos\", nueva_tarea)\r\n\r\n\t\t// dispatch de tipo agregada para que se actualize el estado y no le doy payload porque ya se guardo en la base de datos\r\n\t\tdispatch({\r\n\t\t\ttype: GUARDAR\r\n\t\t})\r\n\t} catch (error) {\r\n\t\tconsole.log(error.message)\r\n\t\tdispatch({\r\n\t\t\ttype: ERROR,\r\n\t\t\tpayload: \"Intente más tarde\"\r\n\t\t})\r\n\t}\r\n}\r\n\r\n// actions que recibe por parametro un objeto con la info a modificar de una tarea, que se mandara a la API para que la API la modifique\r\nexport const editar = (tarea_editada) => async (dispatch) => {\r\n\t// dispatch de cargando\r\n\tdispatch({\r\n\t\ttype: CARGANDO\r\n\t})\r\n\r\n\ttry {\r\n\t\t//peticion PUT el segundo parametro es el objeto que le voy a modificar a la API, y me retorna la respuesta de la peticion en respuesta.data el nuevo campo que se agrego, porque la api es una api fake.\r\n\t\tconst respuesta = await axios.put(`https://jsonplaceholder.typicode.com/todos/${tarea_editada.id}`, tarea_editada)\r\n\r\n\t\t// dispatch de tipo agregada para que se actualize el estado y no le doy payload porque ya se modifico en la base de datos\r\n\t\tdispatch({\r\n\t\t\ttype: GUARDAR\r\n\t\t})\r\n\t} catch (error) {\r\n\t\tconsole.log(error.message)\r\n\t\tdispatch({\r\n\t\t\ttype: ERROR,\r\n\t\t\tpayload: \"Intente más tarde\"\r\n\t\t})\r\n\t}\r\n\r\n}\r\n\r\n// actions que se llama cada vez que seleccionen un checkbox, recibe por parametro el id del usuario y el id de la tarea que se le dio click\r\nexport const cambioCheck = (usu_id, tar_id) => (dispatch, getState) => {\r\n\t// destructuro las tareas, del tareasReducer\r\n\tconst { tareas } = getState().tareasReducer;\r\n\r\n\t// guardo en variable la tarea seleccionada, en especifico\r\n\tconst seleccionada = tareas[usu_id][tar_id]\r\n\r\n\t// guardo en variable la tarea seleccionada, en especifico y hago un objeto de inmutabilidad que será igual a todas las tareas pero a la tarea que se pincho en el checkbox el valor del completed será el contrario\r\n\tconst actualizadas = {\r\n\t\t...tareas\r\n\t}\r\n\t// seleciono las tareas del usuario y va a ser igual a todas las tareas de ese usuario.\r\n\tactualizadas[usu_id] = {\r\n\t\t...tareas[usu_id]\r\n\t}\r\n\t// de todas las tareas del usuario selecionamos la tarea que se le dio click y sera igual a las tareas del usuario y el completed va a hacer lo diferente de la tarea seleccionada\r\n\tactualizadas[usu_id][tar_id] = {\r\n\t\t...tareas[usu_id][tar_id],\r\n\t\tcompleted: !seleccionada.completed\r\n\t}\r\n\r\n\t// dispatch mandando en especifico, un objeto con todas las tareas pero a la tarea que se le dio click le modifico el completed\r\n\tdispatch({\r\n\t\ttype: ACTUALIZAR,\r\n\t\tpayload: actualizadas\r\n\t})\r\n\r\n}\r\n\r\n\r\n// actions que cuando den click al boton de eliminar se llama y recibe por parametro el id de la tarea y ejecuta una peticion de tipo DELETE\r\nexport const eliminar = (tar_id) => async (dispatch) => {\r\n\tdispatch({\r\n\t\ttype: CARGANDO\r\n\t})\r\n\r\n\ttry {\r\n\t\t// ejecuta la peticion de tipo delete al endpoint en especifico de la tarea\r\n\t\tconst respuesta = await axios.delete(`https://jsonplaceholder.typicode.com/todos/${tar_id}`)\r\n\r\n\t\t// dispatch de tipo traer todas y como payload le mando nada para que las vuelva a buscar, como ya se elimino una tarea voy a querer limpiar las tareas para que vuelva a recargar todas las tareas\r\n\t\tdispatch({\r\n\t\t\ttype: TRAER_TODAS,\r\n\t\t\tpayload: {}\r\n\t\t})\r\n\t} catch (error) {\r\n\t\tconsole.log(error)\r\n\t\tdispatch({\r\n\t\t\ttype: ERROR,\r\n\t\t\tpayload: \"Servicio no disponible\"\r\n\t\t})\r\n\t}\r\n}\r\n\r\n// actions que limpia los input\r\nexport const limpiarForma = () => (dispatch) => {\r\n\r\n\tdispatch({\r\n\t\ttype: LIMPIAR\r\n\t})\r\n}\r\n\r\n","import React, { Component } from 'react';\r\n\r\n//importo cosas de redux\r\nimport { connect } from 'react-redux';\r\nimport * as tareasActions from '../../actions/tareasActions'; // actions\r\n\r\n// importamos los componentes:\r\nimport Spinner from '../General/Spinner';\r\nimport Fatal from '../General/Fatal';\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Tareas extends Component {\r\n\tcomponentDidMount() {\r\n\t\t// solo si no hay tareas, las vamos a llamar\r\n\t\tif (!Object.keys(this.props.tareas).length) {\r\n\t\t\tthis.props.traerTodas();\r\n\t\t}\r\n\t}\r\n\r\n\t// cuando ocurra una actualizacion y no hay tareas llamalas\r\n\tcomponentDidUpdate() {\r\n\r\n\t\t// destructuro\r\n\t\tconst { tareas, cargando, traerTodas } = this.props\r\n\r\n\t\t// si no hay tareas y si no esta cargando va a buscar a las tareas\r\n\t\tif (!Object.keys(tareas).length && !cargando ) {\r\n\t\t\ttraerTodas();\r\n\t\t}\r\n\t}\r\n\r\n\tmostrarContenido = () => {\r\n\t\t// destructuro los valores del tareasReducer\r\n\t\tconst { tareas, cargando, error } = this.props;\r\n\r\n\t\t// manejamos si esta cargando retorna el spinner o si hay un error retorna el error\r\n\t\tif (cargando) {\r\n\t\t\treturn <Spinner />;\r\n\t\t}\r\n\r\n\t\tif (error) {\r\n\t\t\treturn <Fatal mensaje={error} />;\r\n\t\t}\r\n\r\n\t\t// Y si todo sale bien, retorno: Object.keys(tareas) nos devuelve las keys de las tareas (un arreglo de 1 hasta 10 lo que tiene el objeto, son los ids de los usuarios) y mapeo cada llave que por cada usu_id retorne un h2 con el usuario y un div con las tareas llama a ponerTareas() que itera todas las tareas del usuario\r\n\t\treturn Object.keys(tareas).map((usu_id) => (\r\n\t\t\t<div key={usu_id}>\r\n\t\t\t\t<h2> Usuario {usu_id} </h2>\r\n\t\t\t\t<div className=\"contenedor_tareas\">{this.ponerTareas(usu_id)}</div>\r\n\t\t\t</div>\r\n\t\t));\r\n\t};\r\n\r\n\t// recibe el usu_id, el id del usuario, recordemos que iteramos por las tareas del usuario y por cada usuario retorno todas las tareas del usuario junto un checkbox.\r\n\tponerTareas = (usu_id) => {\r\n\t\t// destructuro las tareas y el actions del estado\r\n\t\tconst { tareas, cambioCheck, eliminar } = this.props;\r\n\r\n\t\t// const que sera igual al objeto de las tareas del usuario en especifico, tiene todas las tareas de un usuario\r\n\t\tconst por_usuario = {\r\n\t\t\t...tareas[usu_id]\r\n\t\t};\r\n\r\n\t\t// saco las keys que son los id de las tareas y mapeo cada tarea del usuario en especifico| retorno un checkbox que por default el valor sera del jsonPlaceHolder y el titulo de la tarea\r\n\t\treturn Object.keys(por_usuario).map((tar_id) => (\r\n\t\t\t<div key={tar_id}>\r\n\t\t\t\t<input \r\n\t\t\t\t\ttype=\"checkbox\" \r\n\t\t\t\t\tdefaultChecked={por_usuario[tar_id].completed} \r\n\t\t\t\t\tonChange={ () => cambioCheck(usu_id, tar_id) }\r\n\t\t\t\t/>\r\n\r\n\t\t\t\t{por_usuario[tar_id].title}\r\n\r\n\t\t\t\t<button className=\"m_left\">\r\n\t\t\t\t\t<Link to={`/tareas/guardar/${usu_id}/${tar_id}`} >\r\n\t\t\t\t\t\tEditar\r\n\t\t\t\t\t</Link>\r\n\t\t\t\t</button>\r\n\r\n\t\t\t\t<button className=\"m_left\" onClick={ () => eliminar(tar_id) }>Eliminar</button>\r\n\t\t\t</div>\r\n\t\t));\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<button>\r\n\t\t\t\t\t<Link to=\"/tareas/guardar\">\r\n\t\t\t\t\t\tAgregar\r\n\t\t\t\t\t</Link>\r\n\t\t\t\t</button>\r\n\t\t\t\t{this.mostrarContenido()}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\n// Recibe todos los reducers y destructuramos el reducers que usaremos\r\nconst mapStateToProps = ({ tareasReducer }) => tareasReducer;\r\n\r\n// Ya en el connect recibe la función mapStateToProps, las acciones y por ultimo nos llega por props ese reducer es decir el estado y los action creators por props\r\nexport default connect(mapStateToProps, tareasActions)(Tareas);\r\n","import React, { Component } from 'react';\r\n\r\n//importo cosas de redux\r\nimport { connect } from 'react-redux';\r\nimport * as tareasActions from '../../actions/tareasActions'; // actions\r\n\r\nimport Spinner from \"../General/Spinner\"\r\nimport Fatal from \"../General/Fatal\"\r\n\r\nimport { Redirect } from \"react-router-dom\"\r\n\r\nclass Guardar extends Component {\r\n\r\n    componentDidMount() {\r\n        // destructurar los parametros de la url el id del usuario y el id de la tarea\r\n        const {\r\n            match: {params : { usu_id, tar_id }},\r\n            tareas,\r\n            cambioUsuarioId,\r\n            cambioTitulo,\r\n            limpiarForma\r\n        } = this.props\r\n\r\n        // si vienen con parámetros en la URL viene a editar caso contrario viene a agregar y llamamos a limpiarForma\r\n        // si usu_id y tar_id existe en el URL llama a los actions y le mandamos como parametro la tarea\r\n        if (usu_id && tar_id) {\r\n\r\n            // tarea va a ser igual a la tarea en especifico del usuario que se le dio click\r\n            const tarea = tareas[usu_id][tar_id]\r\n\r\n            // llamo a los dos actions que modifique los inputs y estado por la tarea que se le dio click\r\n            cambioUsuarioId(tarea.userId)\r\n            cambioTitulo(tarea.title)\r\n        } else {\r\n            // actions que limpia los inputs\r\n            limpiarForma()\r\n        }\r\n\r\n    }\r\n\r\n    // manejador de eventos, se llama cuando ocurra un cambio en el input\r\n    cambioUsuarioId = (event) => {\r\n\r\n        // llama al actions y le mando lo que se escribe en el input\r\n        this.props.cambioUsuarioId(event.target.value)\r\n    }\r\n\r\n    // manejador de eventos, se llama cuando ocurra un cambio en el input\r\n    cambioTitulo = (event) => {\r\n\r\n        // llama al actions y le mando lo que se escribe en el input\r\n        this.props.cambioTitulo(event.target.value)\r\n    }\r\n\r\n    // maneja el evento click del boton guardar\r\n    guardar = () => {\r\n        // destructuro el estado, que tiene lo que escribio en el input\r\n        const { \r\n            match: {params : { usu_id, tar_id }},\r\n            tareas,\r\n            usuario_id, \r\n            titulo, \r\n            agregar,\r\n            editar } = this.props\r\n\r\n        // objeto que tiene los valores de la nueva tarea que se enviara a la API\r\n        const nueva_tarea = {\r\n            userId: usuario_id,\r\n            title: titulo,\r\n            completed: false\r\n        }\r\n\r\n        // si esas variables vienen en la URL ejecuta esto, caso contrario LLAMA al dispatch de tipo POST\r\n        if (usu_id && tar_id) {\r\n\r\n            // tarea va a ser igual a la tarea en especifico del usuario que se le dio click\r\n            const tarea = tareas[usu_id][tar_id];\r\n\r\n            // un objeto con todo lo que tenia la nueva_tarea y pisamos completed por la que esta en el estado y le entregamos un atributo adicional llamado id mandandole el id de la tarea, tiene los valores que va modificar en la API\r\n            const tarea_editada = {\r\n                ...nueva_tarea,\r\n                completed: tarea.completed,\r\n                id: tarea.id\r\n            }\r\n\r\n            // llamo al dispatch que va a hacer la peticion de tipo PUT\r\n            editar(tarea_editada)\r\n        }\r\n        else{\r\n\r\n            // llamo al action que va a hacer la peticion POST\r\n            agregar(nueva_tarea)   \r\n        }\r\n\r\n    }\r\n    // funcion del boton que si retorna true se deshabilita el boton\r\n    deshabilitar = () => {\r\n\r\n        // destructuro la infomacion del estado, que es lo que escribe de los inputs\r\n        const { usuario_id, titulo, cargando } = this.props\r\n\r\n        // si esta cargando retorna true\r\n        if (cargando) {\r\n            return true\r\n        }\r\n\r\n        // si no esta la informacion del usuario id o en el titulo, lo de los inputs\r\n        if (!usuario_id || !titulo) {\r\n            return true\r\n        }\r\n\r\n        // si todo esta bien retorna false para que se habilite el boton\r\n        return false;\r\n    }\r\n\r\n    // se llamara debajo del boton solo cuando den click al boton\r\n    mostrarAccion = () => {\r\n        // destructura el error y el cargando del estado\r\n        const { error, cargando } = this.props;\r\n\r\n        // si esta cargando retorno el spinner y si hay un error se llama al fatal\r\n        if (cargando) {\r\n            return <Spinner />\r\n        }\r\n\r\n        if (error) {\r\n            return <Fatal mensaje={error} />\r\n        }\r\n    }\r\n    \r\n     \r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n                {\r\n                    // si regresar esta en true redirigimos a /tareas caso contrario ejecuta nada\r\n                   (this.props.regresar) ? <Redirect to=\"/tareas\" /> : \"\"\r\n                }\r\n\t\t\t\t<h1>Guardar Tarea</h1>\r\n\r\n\t\t\t\tUsuario id:\r\n                <input \r\n                    type=\"number\" \r\n                    value={ this.props.usuario_id } \r\n                    onChange={ this.cambioUsuarioId }\r\n                />\r\n\r\n\t\t\t\t<br />\r\n\t\t\t\t<br />\r\n\r\n\t\t\t\tTitulo:\r\n                <input \r\n                    type=\"text\" \r\n                    value={ this.props.titulo } \r\n                    onChange={ this.cambioTitulo }\r\n                />\r\n\r\n                <br />\r\n\t\t\t\t<br />\r\n\r\n                <button \r\n                    onClick={ this.guardar }\r\n                    disabled={ this.deshabilitar() }\r\n                >\r\n                    Guardar\r\n                </button>\r\n                { this.mostrarAccion() }\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\n// Recibe todos los reducers y destructuramos el reducers que usaremos\r\nconst mapStateToProps = ({tareasReducer}) => tareasReducer;\r\n\r\n// Ya en el connect recibe la función mapStateToProps, las acciones y por ultimo nos llega por props ese reducer es decir el estado y los action creators por props\r\nexport default connect(mapStateToProps, tareasActions)(Guardar);\r\n","import React from 'react';\r\nimport { BrowserRouter, Route } from 'react-router-dom';\r\nimport Menu from './Menu'; //importamos el menu\r\nimport Usuarios from './Usuarios'; //importamos el componente usuarios que es una tabla\r\nimport Publicaciones from './Publicaciones';\r\nimport Tareas from \"./Tareas\"; // importo el componente tareas\r\nimport TareasGuardar from \"./Tareas/Guardar\"; // importo el componente guardar que se renderiza cuando se haga match con la ruta del navegador\r\n\r\nconst App = () => (\r\n\t<BrowserRouter>\r\n\t\t<Menu />\r\n\t\t<div className=\"margen\">\r\n\t\t\t<Route exact path=\"/\" component={Usuarios} />\r\n\t\t\t<Route exact path=\"/redux\" component={Usuarios} />\r\n\t\t\t<Route exact path=\"/tareas\" component={Tareas} />\r\n\t\t\t<Route exact path=\"/publicaciones/:key\" component={Publicaciones} />\r\n\t\t\t<Route exact path=\"/tareas/guardar\" component={TareasGuardar} />\r\n\t\t\t<Route exact path=\"/tareas/guardar/:usu_id/:tar_id\" component={TareasGuardar} />\r\n\t\t</div>\r\n\t</BrowserRouter>\r\n);\r\n\r\nexport default App;\r\n","import { TRAER_TODOS, CARGANDO, ERROR } from '../types/usuariosTypes'; // IMPORTAMOS SOLAMENTE la constante TRAER_TODOS de esta ruta ../types/usuariosTypes\r\n\r\n// inicializamos un estado\r\nconst INITIAL_STATE = {\r\n\tusuarios: [],\r\n\tcargando: false,\r\n\terror: ''\r\n};\r\n\r\n//aquí se crea la función, el estado inicial, y la acción es la \"tarea a realizar\"\r\nexport default (state = INITIAL_STATE, action) => {\r\n\t//se crea el switch porque llegaran varias tareas y solo se distingue por el nombre\r\n\tswitch (action.type) {\r\n\t\tcase TRAER_TODOS:\r\n\t\t\t//la tarea que llegara en esta ocasión es 'traer_usuarios'\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tusuarios: action.payload,\r\n\t\t\t\tcargando: false,\r\n\t\t\t\terror: ''\r\n\t\t\t};\r\n\r\n\t\tcase CARGANDO:\r\n\t\t\treturn { ...state, cargando: true };\r\n\r\n\t\tcase ERROR:\r\n\t\t\treturn { ...state, error: action.payload, cargando: false };\r\n\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n","import {\r\n\tACTUALIZAR,\r\n\tCARGANDO,\r\n\tERROR,\t\r\n\tCOM_ACTUALIZAR,\r\n\tCOM_ERROR,\r\n\tCOM_CARGANDO\r\n} from '../types/publicacionesTypes'; // IMPORTAMOS SOLAMENTE las constante TRAER_TODOS de esta ruta ../types/publicacionesTypes\r\n\r\n// inicializamos un estado\r\nconst INITIAL_STATE = {\r\n\tpublicaciones: [],\r\n\tcargando: false,\r\n\terror: '',\r\n\tcom_cargando: false,\r\n\tcom_error: ''\r\n};\r\n\r\n//aquí se crea la función, el estado inicial, y la acción es la \"tarea a realizar\"\r\nexport default (state = INITIAL_STATE, action) => {\r\n\t//se crea el switch porque llegaran varias tareas y solo se distingue por el nombre\r\n\tswitch (action.type) {\r\n\t\tcase ACTUALIZAR:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tpublicaciones: action.payload,\r\n\t\t\t\tcargando: false,\r\n\t\t\t\terror: ''\r\n\t\t\t};\r\n\r\n\t\tcase CARGANDO:\r\n\t\t\treturn { ...state, cargando: true };\r\n\r\n\t\tcase ERROR:\r\n\t\t\treturn { ...state, error: action.payload, cargando: false };\r\n\r\n\t\tcase COM_ACTUALIZAR:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tpublicaciones: action.payload,\r\n\t\t\t\tcom_cargando: false,\r\n\t\t\t\tcom_error: ''\r\n\t\t\t};\r\n\r\n\t\tcase COM_CARGANDO:\r\n\t\t\treturn { ...state, com_cargando: true };\r\n\r\n\t\tcase COM_ERROR:\r\n\t\t\treturn { ...state, com_error: action.payload, com_cargando: false };\r\n\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n","import { \r\n\tTRAER_TODAS, \r\n\tCARGANDO, \r\n\tERROR,\r\n\tCAMBIO_USUARIO_ID,\r\n\tCAMBIO_TITULO,\r\n\tGUARDAR,\r\n\tACTUALIZAR,\r\n\tLIMPIAR\r\n} from '../types/tareasTypes'; // IMPORTAMOS SOLAMENTE la constante TRAER_TODOS de esta ruta ../types/usuariosTypes\r\n\r\n\r\n// inicializamos un estado\r\nconst INITIAL_STATE = {\r\n\ttareas: {},\r\n\tcargando: false,\r\n\terror: '',\r\n\tusuario_id: '',\r\n\ttitulo: '',\r\n\tregresar: false\r\n};\r\n\r\n//aquí se crea la función, el estado inicial, y la acción es la \"tarea a realizar\"\r\nexport default (state = INITIAL_STATE, action) => {\r\n\t//se crea el switch porque llegaran varias tareas y solo se distingue por el nombre\r\n\tswitch (action.type) {\r\n\t\tcase TRAER_TODAS:\r\n\t\t\t//la tarea que llegara en esta ocasión es 'traer_usuarios'\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\ttareas: action.payload,\r\n\t\t\t\tcargando: false,\r\n\t\t\t\terror: '',\r\n\t\t\t\tregresar: false\r\n\t\t\t};\r\n\r\n\t\tcase CARGANDO:\r\n\t\t\treturn { ...state, cargando: true };\r\n\r\n\t\tcase ERROR:\r\n\t\t\treturn { ...state, error: action.payload, cargando: false };\r\n\r\n\t\tcase CAMBIO_USUARIO_ID:\r\n\t\t\treturn { ...state, usuario_id: action.payload }\r\n\t\t\r\n\t\tcase CAMBIO_TITULO:\r\n\t\t\treturn { ...state, titulo: action.payload }\r\n\r\n\t\tcase GUARDAR:\r\n\t\t\treturn { ...state, tareas:{}, cargando: false, error: \"\", regresar: true, usuario_id: \"\", titulo: \"\"}\r\n\r\n\t\tcase ACTUALIZAR:\r\n\t\t\treturn { ...state, tareas: action.payload }\r\n\t\t\t\r\n\t\tcase LIMPIAR:\r\n\t\t\treturn { ...state, usuario_id: \"\", titulo:\"\" }\r\n\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n","import { combineReducers } from 'redux';\r\nimport usuariosReducer from './usuariosReducers'; //importamos un reducer\r\nimport publicacionesReducer from './publicacionesReducer'; //importamos un reducer\r\nimport tareasReducer from './tareasReducer'; //importamos un reducer\r\n\r\nexport default combineReducers({\r\n\tusuariosReducer,\r\n\tpublicacionesReducer,\r\n\ttareasReducer\r\n});\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/index.css';\r\nimport './css/iconos.css';\r\nimport App from './components/App';\r\n\r\n// importamos cosas de redux\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport reduxThunk from 'redux-thunk';\r\n\r\nimport reducers from './reducers'; // importamos los reducers\r\n\r\n// necesitamos crear un store, para pasarlo este almacenamiento a toda la app.\r\n// primer parametro son todos lo reducers de mi app, el segundo parametro es el estado inicial\r\nconst store = createStore(\r\n\treducers, // Son todos los reducers\r\n\t{}, // Estado inicial\r\n\tapplyMiddleware(reduxThunk)\r\n);\r\n\r\nReactDOM.render(\r\n\t<Provider store={store}>\r\n\t\t<App />\r\n\t</Provider>,\r\n\tdocument.getElementById('root')\r\n);\r\n"],"sourceRoot":""}